server:
  port: 9000
spring:
  application:
    name: "cards"

  config:
    import: ${SPRING_CONFIG_IMPORT:optional:configserver:http://localhost:8071/}

  # RabbitMQ config for Spring Cloud Bus

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3308/cardsdb}
    username: ${SPRING_DATASOURCE_USERNAME:root}
    password: ${SPRING_DATASOURCE_PASSWORD:root}

  jpa:
    show-sql: true

  sql:
    init:
      mode: always

    # setting sql init mode in spring.sql.init.mode section to run the schema.sql file to create tables,
  # as mysql doesn't run the schema.sql automatically

  profiles:
    active: prod

springdoc:
  swagger-ui:
    path: /swagger


# Actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"
  info: # enable /actuator/info endpoint
    env:
      enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
    shutdown: # this is for deregistering from eureka server
      enabled: true
  metrics: # this is for telling micrometer and prometheus to group all the matrix of this application under an application name, so we can easily understand which matrix is used for which microservice
    tags:
      application: ${spring.application.name}


# deregistering from eureka server
endpoints:
  shutdown:
    enabled: true

# Eureka properties
eureka:
  instance:
    prefer-ip-address: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/ # eureka microservices url

# Setting some cards microservices related properties to view in the eureka dashboard
# Also, this info related information is also found in the actuator related endpoints
# To view it in the actuator endpoint, we have to enable it in the actuator, it will show in the status link of eureka dashboard
info:
  app:
    name: "cards"
    description: "Cards Microservices"
    version: "1.0.0"